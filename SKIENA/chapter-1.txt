

Problem vs Instance
Problem = the general goal
Instance = specific example of a goal

TSP/Traveling Salesman Problem

Nearest Neighbour -> less optimal because of potential "zig zag"

Connect Pair -> Pair points that are the closest, gradually connect small cluster
potentially can connect across row creating a "tangled" route

Perfect algorithm -> Brute Force

_____________________

Interval scheduling Problem

stop and think: incremental correctnes

problem: prove correctness of the following alg for incrementing natural number
y -> y + 1

increment(y)
    if y = 0 then return (1)
        if (y mod 2) = 1 then ; if its an even number
            reutrn (2 . increment(floor(y/2)))
        else return (y+1) ; if its an odd number, increase y by 1


base case: when y reaches 0, return 1
how about if its a negative integer?
does it termintae?

if case -> y mod 2 = 1
recurse with new y = floor(y/2) . 2
else increment y by 1

case where its odd
let y = 3
2 . increment(floor(3/2))
2 . increment(1)
then inside increment(1)
2 . increment(floor(1/2))
2 . increment(0)
2 . 2 . 1 = 4

case where its even
just increse it by 1
let y = 2
return y + 1 -> 3, which is true even for any even numbers

base: y = 0, increment by 1 which is 1 so correct
assume: assume it works for all values less than n
prove: therefore works for y = n

floor(y/2) -> remove the last binary digit (right shift)
11 (3) -> 1 (1)
101 (5) -> 10 (2)

2 . x -> add 0 to the end in binary
10 (2) -> 100 (4)
11 (3) -> 110 (6)

y = 2m+1

increment(2m+1) -> 
2 . increment(floor(y/2)) -> 2 . increment(floor(2m+1/2)) -> 2 . increment(m)

IH -> increment(m) = m+1

2 . (m+1) = 2m + 2 -> (2m+1) + 1 = y + 1

_______________________

stop and think: factorial formulae

problem: prove that summation from i=1 to n of i * i! = (n+1)! - 1 by induction


base: n=1
sum from i = 1 to 1 of 1 * 1! = 1
(n+1)! - 1 = 2! - 1 = 2.1 - 1 = 1
they are equal

n = 2
2 * 2! + 1 * 1! = 2 * 2 + 1 = 5
3! - 1 = 5
they are equal

seems to be true for smaller base case

assume: it works for some n = k
by the definition of factorial n! = n . n-1!
Sk = (k+1)! - 1 -> IH

prove: it must then work for n = k + 1
Sk+1 = Sk + k+1 * k+1!
Sk+1 = (k+1)! - 1 + k+1 * k+1!
sk+1 = k+1! (1 + k+1) - 1
sk+1 = k+1! (k+2) - 1
sk+1 = k+2! - 1


_____________________
Modeling means turning a messy real-world problem into a clean math or logic problem that we already understand.

permutation problm
what order should i do these things?
- robot tour
- sorting
- scheduling

subsets problem
which items should i choose?
order doesn't matter
- choosing members
- movie scheduling

Tree Problem
hierarchical parent/child relationship
- company orgs chart
- file system
- decision tree
- family tree
- categories, subcategories

graphs problem
anything connected to anything else
- road maps
- social network
- computer networ

points problem
- location in space
- location on map
-stars in astronomy

strings problem
- dna seq
- text docs


_____________________

Exercises

1-1
show that a+b can be less than min(a,b)

lets pick a small example
let a = -1
let b = -2

a+b = -1 -2 = -3
min(a,b) = min(-1,-2) = -2

-3 < -2? true
therefore shown

1-2 show that axb can be less than min(a,b)

lets pick an example
a = -1
b = 2

a x b = -1 * 2 = -2
min(a,b) = min(-1,2 = -1)

therefore axb < min(a,b)

1-5

The knapsack problem is as follows: given a set of integers S = {s1,s2,...,sn},
 and a target number T, find a subset of S which adds up exactly to T. For example,
 there exists a subset within S = {1,2,5,9,10} that adds up to T = 22 but not
 T =23.

 Find counterexamples to each of the following algorithms for the knapsack problem.
 That is, giving an S and T such that the subset is selected using the algorithm does
 not leave the knapsack completely full, even though such a solution exists.

a. put the elements of s in the knapsack in left to right order if they fit.
ie the first fit algorithm

b. put the elements of s in the knapsack from smallest to largest. ie tbest fir lagorithm

c. put the elements of s in the knpsack from largest to smallest


answer:
a. this would fail because it fails to plan ahdead
it doesn't know what the unchecked part is
counterexample: 
let T = 6
S={2,3,3}

b. smallest to largest and it fails
it fails because it waste space early
it has no room left for single large item
counterexample:
let S = {1,2,2,6}
let T = 6


c. largest to smallest and why it fails
it fails because it checks too early/short sighted
can block combination of smaller numbers that would fit the target perfectly

counterexample:
let S = {5,3,3}
let T = 6

1-6
The set cover problem is as follows: given a set of subsets S1,...,Sm of the
 universal set U = {1,...,n}, find the smallest subset of subsets T âŠ‚ S such that
Uti E TTi = U. For example, there are the following subsets, S1 = {1,3,5}, S2 =
 {2,4}, S3 = {1,4},andS4 = {2,5} The set cover would then be S1 and S2.
 Find a counterexample for the following algorithm: Select the largest subset for the
 cover, and then delete all its elements from the universal set. Repeat by adding the
 subset containing the largest number of uncovered elements until all are covered.

 countereample
s1 = {1,2,3,4}
s2 = {1,2,3}
s3 = {4,5}

Proofs of correctness
1-7. prove the correctness of the following recursive algorithm to multiply
two natural numbers,
for all integer constants c>= 2

function multiply(2)
    ; return the product yz
    if z = 0
        return 0
    else
        return multiply(cy, floor(z/c)) + y . (z mod c)

answer:

base case: z = 0 -> yz = 0 -> any number multiplied by 0 is always 0, so correct

assume/IH: multiply(y,z) works correctly for all z' < z

prove/IS: correct for all integers

1-8
prove the correctness of the following algorithm for evaluating a polynomial
P(x) = anx^n+an-1xn^-1+...+a1x+ao

function horner(A,x)
    p = an
    for i from n - 1 to 0
    p = p * x + A
    return p

answer:

base case: a0 -> lowest term which is just a coeficient
Before the first iteration, i = n-1 and p = a n


inductive hypothesis
assume the algorithm holds at the start of iteration i

inductive step
we must show it holds true for the first k+1 coeficients
at each iteration p represents the total part of polynomial already processed/sum
by multiplying p and x.

induction
1.10. prove that sigma from i = 1 to n of i = n(n+1)/2 for n>=0 by induction

answer:
base case: n = 0
n(n+1)/2
= 0(0+1)/2
= 0/2
= 0
 true since the sum of the first 0 digit is 0

inductive hypothesis
assume the formula works for n = k
k(k+1)/2

inductive step
show that the formula works for n = k + 1
k+1(k+1+1)/2
= k+1(k+2)/2

1-11.
prove that sigma from i = 1 to n of i^2 = n(n+1)(2n+1)/6 for n>= 0 by induction

base case: n = 0
0(0+1)(2(0)+1)/6
= 0(1)(1)/6
= 0/6 = 0

sum of 0^2 = 0
so the base case holds

inductive hypothesis
assume the formula works for n = k
1^2 + 2^2 + ... + k^2 = k(k+1)(2k+1)/6

inductive step
we must show the formula forks for n = k+ 1
use IH to replace sum to up k

1^2 + 2^2 + ... + k^2 + (k+1)^2
= [k(k+1)(2k+1)/6] + [k+1^2]
= k+1(k(2k+1)/6 + k+1)
= k+1 (2k^2+k/6 + k+1)
= k+1 . 2k^2 + 6k + 6 / 6
= k+1 . (k+2) (2k+3) / 6
= k+1 . k+2 . 2k + 3 / 6

1-12 prove that sigma from i = 1 to n of i^3 = n^2(n+1)^2/4 for n>= 0 by induction

base case: n = 0
i^3 = 0^3 = 0

 n^2(n+1)^2/4
 0^2(1)^2/4
 = 0/4 = 0

 therefore the bsae case holds
 inductive hypothesis
 assume the formula works for n = k
1^3 + 2^3 + ... + k^3 = n^2(n+1)^2/4

inductive step
we must show the ofrmula works for n = k+1
1^3 + 2^3 + ... + k^3 + (k+1)^3

use IH to replace sum up to k
[k^2(k+1)^2/4] + (k+1)^3
= k+1^2 (k^2)/4 + k+1
= (k+1)^2(k+2)^2/4

1-13 prove that
sigma from i = 1 to n of i(i+1)(i+2) = n(n+1)(n+2)(n+3)/4

answer:
base case: n=0
n(n+1)(n+2)(n+3)/4 = 0.1.2.3/4 = 0
i(i+1)(i+2) = 0(1)(2) = 0 
so the base case holds

inductive hypothesis
assume formula holds for n = k
1(1+1)(1+2)+ ... + k(k+1)(k+2) = k(k+1)(k+2)(k+3)/4

inductive step
we must show the formula works for n=k+1
use IH to replace sum up to k
[1(1+1)(1+2)+ ... + k(k+1)(k+2)] + k+1
= k(k+1)(k+2)(k+3)/4 + (k+1)(k+2)(k+3)
= (k+1)(k+2)(k+3) . k+4/4
= 

1-16
prove by induction that n^3 + 2n is divisible by 3 for all n>= 0

base case: n = 0
n^3 + 2n = 0^3 + 2(0) = 0 + 0 = 0
is 0 divisible by 3? yes, 0 is divisibe by any number except for 0 itself

inductive hypothesis
assume the formula nolds for n = k
k^3 + 2k is divisble by 3
that means k^3 + 2k = 3m for some integer m

inductive step
we must show that the formula works for n = k+1
k+1^3 + 2(k+1) is divisble by 3
= (k+1)(k+1)(k+1) + 2(k+1)
= (k+1)(k^2+2k+1) + 2(k+1)
= k^3 + 2k^2 + k + k^2 + 2k + 1 + 2(k+1)
= k^3 + 3k^2 +3k + 1 + 2(k+1)
= k^3 + 3k^2 + 5k + 3
= k^3 + 2k + 3k + 3k^2 + 3
= 3m + (3k^2 + 3k + 3)
= 3m + 3(k^2 + k + 1)


1-17
prove by induction that a tree with n vertices has exactly n-1 edges

base case
tree with one single vertex -> n = 1
edge = 0 since its not connected to other vertex
n - 1 = 0 -> base case holds

inductive step
suppose the formula holds for n = k vertices
that is, a tree with k vertices has exactly k - 1 edges

inductive hypothesis
we must show that the property holds for n = k + 1 vertices
to attach a new vertex to a tree and keep it ocnnected
the minimum edge rquired is at least 1

we know from IH a tree with k vertices has k-1 edges
so k+1 vertices kas k+1-1 edges
so k edges total.

1-18
prove by mathematical induction that the sum of the cubes of the first
n positive integer is qual to the square of the sum of these integers, ie

sigma from i to n of i^3 = (sigma from i to n of i)^2

base case: n = 1/first 1 positive integer
sigma from i to 1 of i^3 = 1^3 = 1
(sigma from i to n of i)^2 = (1)^2 = 1
base case holds

inductive hypothesis
assume the formula holds for n = k positive integer

sigma from i to k of i^3 = (sigma from i to k of i)^2
(1^3 + ... + k^3) = (1+2+...+k)^2

inductive step
we must show that the formula holds for n = k+1

(1^3 + ... + k^3) + (k+1)^3 = (1+2+...+k+(k+1))^2

focus on LHS -> substitute from IH
(1+2+...+k)^2 + (k+1)^3 
= (k(k+1)/2)^2 + (k+1)^3
= (k+1)^2 (k^2/4 + k+1)
= k^2 / 4 + k+1 
= (k+1)^2(k+2)^2/4

Estimation
1-19. Do all the books you own total at least one million pages? How many total
 pages are stored in your school library?

answer:
what if i don't own any books at all? does that mean it has 0 pages? so at least one million pages is false?
im not sure how to answer this. lets assume average person reads 10-20 books a year
and each book has around average of 300-500 pages 
so from they were born - average adult age (25 or above) they have colleceed 10-20*300-500
so around 3000-10000 pages - this number seesm to be too low. maybe this is for person who doesn't read oboks
what counts as a book? i forgot to add school/academic books lets say from grade 1 - 12+ up to college
lets say additional 30 books/year so 30*25 = 750 books * 300-500 = 225000 - 375000
i'm gonna say false here and the answer depends if the person is a bookworm or just a regular person

how many total pages are stored in your school library?
now this one im not suer how to answer
lets assume one "deck" holds around 100 - 200 books
and average library has around 50-100 of these decks

so average library should hold around 5000 - 20000 total books
and multiply that by the average number of pages (300-500). lets pick an average lets say 300 pages average book
so 300*5000 - 300*20000 = 1.500.000 - 6.000.0000 pages total


1-20
how many words are there in this textbook?

answer:
lets see, this is a skiena algorithm textbook im currently opening it says it has around 739 pages
 don't know what the average word in a page is but i remember having to
 do a 200 word essay that takes around almost a page
since this is a textbook lets say each page holds around 300 - 500 cause its more dense
so multiply it 739*300 - 739*500 = ~220000 - 370000


1-22. How many hours are one million seconds? How many days? Answer these
 questions by doing all arithmetic in your head.

answer: 

1 hour = 60 minutes
1 mintes = 60 seconds
1 hour = 3600 seconds

one million seconds = 1000000/3600 =  10000/36 = ~300 hours
days = ~300/24 = approx 12+ days

1-24
 Is disk drive access time normally measured in milliseconds (thousandths of a
 second) or microseconds (millionths of a second)? Does your RAM memory access
 a word in more or less than a microsecond? How many instructions can your CPU
 execute in one year if the machine is left running all the time?

answer:
 I'm not sure if its measured in ms or microseconds. I think when i transfer fiel
 in windows it gives indicator in kbps or mbps so its measured in seconds. So maybe miliseconds

 does my ram memory access a word in more or less than a microsecod?
 if i remember ram is measued in ghz or gigahertz and im not sure what "word" means here
 so its around 1 milion or billion instructions per second im assuming its a series of letters

 how many instructions can your CPU execute in one year if machine left running all the itme?
 my cpu has around 3.8hgz of processing per second
 so around 4 billion instruction per seconds
 per hour you time that by 3600 so around 14.400 billion instructions per second
 per day * 24 = 345600 billion
 per year = 133000000 billion

 1-25
  A sorting algorithm takes 1 second to sort 1,000 items on your local machine.
 How long will it take to sort 10,000 items...

 (a)if you believe that the algorithm takes time proportional to n2,and
 (b) if you believe that the algorithm takes time roughly proportional to nlogn?

linear time = 10 seconds -> 10000
 
 a. 
if the algorithm takes time proportional to n^2
n^2 time = T(10000)/T(1000) = (10000/1000)^2 = 10^2 = 100

b. n log n = 10 lg 10 = 13.3


1-26. Implmeent the two TSP heuristics of section 1.1.
Which of them gives better quality solutions in practice?
Can you devise a heuristic that works better than both of htem?

from section 1.1
NearestNeighbor(P)
 Pick and visit an initial point p0 from P
 p =p0
 i =0
 While there are still unvisited points
 i =i+1
 Select pi to be the closest unvisited point to piâˆ’1
 Visit pi
 Return to p0 from pnâˆ’1

 ClosestPair(P)
 Let n be the number of points in set P.
 For i =1tonâˆ’1do
 d =âˆž
 For each pair of endpoints (s,t) from distinct vertex chains
 if dist(s,t) â‰¤ d then sm = s, tm = t,andd = dist(s,t)
 Connect (sm,tm) by an edge
 Connect the two endpoints by an edge